#!/usr/bin/env node
const inquirer = require('inquirer');
const fetch = require('node-fetch');
const fs = require('fs');
const wget = require('node-wget');
const StreamZip = require('node-stream-zip');
const path = require('path');
const mv = require('mv');
const glob = require('glob');
const ora = require('ora');
const rimraf = require('rimraf');

function getRepositoryData(url) {
  const parts = url.split(':')[1].split('/');
  return {
    username: parts[0],
    repository: parts[1].replace('.git', ''),
  };
}

async function getBranches(repository, username) {
  return fetch(`https://api.github.com/repos/${username}/${repository}/branches`).then(res =>
    res.json(),
  );
}

async function getDesiredBranch(branches) {
  return inquirer.prompt([
    {
      type: 'list',
      name: 'branch',
      message: 'Which branch do you want to download?',
      choices: branches.map(branch => branch.name),
    },
  ]);
}

async function getGitHubRepo() {
  return inquirer
    .prompt([
      {
        type: 'rawlist',
        name: 'url',
        message: 'What repo would you like to checkout?',
        choices: [
          { name: 'vue-skeleton', value: 'git@github.com:hjeti/vue-skeleton.git' },
          { name: 'muban', value: 'git@github.com:mediamonks/muban.git' },
          { name: 'react-skeleton', value: 'git@github.com:larsvanbraam/react-skeleton.git' },
          'custom',
        ],
      },
      {
        when: response => response.url === 'custom',
        type: 'input',
        name: 'url',
        message: 'GitHub clone url',
      },
    ])
    .then(answers => answers.url);
}

async function downloadRepository(username, repository, branch) {
  return new Promise((resolve, reject) => {
    wget(
      {
        url: `https://github.com/${username}/${repository}/archive/${branch}.zip`,
        destination: `./`,
      },
      error => {
        error ? reject(error) : resolve();
      },
    );
  });
}

async function deleteFile(file) {
  return new Promise((resolve, reject) => {
    rimraf(file, error => {
      if (error) reject(error);
      resolve();
    });
  });
}

async function moveFiles(source, destination) {
  return new Promise((resolve, reject) => {
    glob(`${source}/**/*.*`, { dot: true }, (error, files) => {
      if (error) reject(error);
      let count = 0;
      files.forEach(file => {
        mv(file, file.replace(source, destination), { mkdirp: true }, error => {
          if (error) reject(error);
          count += 1;
          if (count >= files.length - 1) resolve();
        });
      });
    });
  });
}

async function extractZip(repository, branch) {
  return new Promise((resolve, reject) => {
    const file = `./${branch}.zip`;
    const zip = new StreamZip({
      file,
      storeEntries: true,
    });

    zip.on('ready', () => {
      // Create the output directory
      fs.mkdirSync(branch);

      // Extract the zip file
      zip.extract(`${repository}-${branch}/`, `./${branch}`, async err => {
        if (err) reject('Extract error');
        zip.close();
        // Delete the extracted zip file
        await deleteFile(file);
        resolve();
      });
    });
  });
}

(async () => {
  const url = await getGitHubRepo();
  const { username, repository } = getRepositoryData(url);
  const branches = await getBranches(repository, username);
  const { branch } = await getDesiredBranch(branches);

  const spinner = ora('Downloading branch...').start();
  await downloadRepository(username, repository, branch);
  spinner.text = 'Extracting data...';
  await extractZip(repository, branch);
  spinner.text = 'Moving data...';
  await moveFiles(`${path.resolve()}/${branch}`, path.resolve());
  spinner.text = 'Deleting temp data...';
  await deleteFile(branch);
  spinner.stop();
  console.log('Done.');
})();
